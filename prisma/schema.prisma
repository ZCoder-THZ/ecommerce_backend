generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           Int             @default(0)
  password       String?
  accounts       Account[]
  assignedIssues Issue[]         @relation("UserAssignedIssues")
  issues         Issue[]         @relation("UserIssues")
  sessions       Session[]
  
  // Received notifications (as receiver)
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  // Sent notifications (as sender)
  sentNotifications Notification[] @relation("NotificationSender")
  
  issueCommands  IssueCommand[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id               Int             @id @default(autoincrement())
  title            String
  description      String
  status           IssueStatus     @default(OPEN)
  priority         IssuePriority   @default(low)
  assignedDate     DateTime?
  deadlineDate     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String
  assignedToUserId String?
  assignedToUser   User?           @relation("UserAssignedIssues", fields: [assignedToUserId], references: [id])
  user             User            @relation("UserIssues", fields: [userId], references: [id])
  notifications    Notification[]
  issueCommands    IssueCommand[]
  issueImages      IssueImage[]

  @@index([userId])
  @@index([assignedToUserId])
  @@map("issues")
}

model IssueImage {
  id       Int    @id @default(autoincrement())
  issueId  Int
  imageUrl String
  issue    Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@map("issue_images")
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String   // Added title for better context
  message   String
  type      String   // e.g., "assignment", "mention", "system"
  read      Boolean  @default(false) // Mark as read status
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String   // receiver ID
  senderId  String   // sender ID
  issueId   Int?

  // Relations
  receiver  User     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  sender    User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user       User     @relation("UserNotifications", fields: [userId], references: [id])
  // Indexes
  @@index([userId])
  @@index([senderId])
  @@index([issueId])
  @@index([read])    // Added index for frequently queried field
  @@map("notifications")
}

model IssueCommand {
  id          Int      @id @default(autoincrement())
  issueId     Int
  userId      String
  timestamp   DateTime @default(now())
  text        String
  likes       Int      @default(0)
  replies     Json     @default("[]")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue       Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([userId])
  @@map("issue_commands")
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  high
  medium
  low
  lowest
}