// src/schemas/product.schema.ts
import { z } from 'zod';
import { extendZodWithOpenApi } from '@asteasolutions/zod-to-openapi';

extendZodWithOpenApi(z);

// Schema representing the full Product database record / API Response
export const ProductSchema = z.object({
    id: z.number().int(),
    name: z.string(),
    description: z.string(),
    imageUrl: z.string().url(), // URL is present in the response/DB record
    categoryId: z.number().int(),
    statusId: z.number().int(),
    // Include relations if they are part of the typical response
    // category: CategorySchema.optional(), // Example
    // status: ProductStatusSchema.optional(), // Example
    // images: z.array(ProductImageSchema).optional(), // Example
    // stock: z.array(StockSchema).optional(), // Example
    createdAt: z.coerce.date(), // Coerce if needed, or keep transform if parsing string dates
    updatedAt: z.coerce.date(),
});

// Schema for validating req.body when CREATING a product via multipart/form-data
// Excludes fields generated by DB (id, createdAt, updatedAt) or handled via file upload (imageUrl)
export const ProductCreateBodySchema = z.object({
    name: z.string().min(1, { message: "Product name is required" }),
    description: z.string().min(1, { message: "Description is required" }),
    // Use z.coerce to automatically convert incoming string from FormData to number
    categoryId: z.coerce.number({ invalid_type_error: "Category ID must be a number" })
        .int()
        .positive({ message: "Category ID must be positive" }),
    statusId: z.coerce.number({ invalid_type_error: "Status ID must be a number" })
        .int()
        .positive({ message: "Status ID must be positive" }),
});

// Schema for validating req.body when UPDATING a product via multipart/form-data
// All fields are optional. imageUrl is handled via file upload logic, not req.body.
export const ProductUpdateBodySchema = z.object({
    name: z.string().min(1).optional(),
    description: z.string().min(1).optional(),
    // Coerce optional numeric fields
    categoryId: z.coerce.number({ invalid_type_error: "Category ID must be a number" })
        .int()
        .positive({ message: "Category ID must be positive" })
        .optional(),
    statusId: z.coerce.number({ invalid_type_error: "Status ID must be a number" })
        .int()
        .positive({ message: "Status ID must be positive" })
        .optional(),
}).refine(data => Object.keys(data).length > 0, { // Ensure at least one field is provided for update
    message: "At least one field (name, description, categoryId, statusId) must be provided for update",
    path: ["general"], // You can assign the error to a general path
});


// Schema for ProductImage (if not defined elsewhere) - useful for responses
export const ProductImageSchema = z.object({
    id: z.number().int(),
    productId: z.number().int(),
    url: z.string().url(),
    createdAt: z.coerce.date(),
    updatedAt: z.coerce.date(),
});


// Main type derived from the full schema (for responses, DB interactions)
export type Product = z.infer<typeof ProductSchema>;
// Type for the data expected in req.body during creation
export type ProductCreateBodyInput = z.infer<typeof ProductCreateBodySchema>;
// Type for the data expected in req.body during update
export type ProductUpdateBodyInput = z.infer<typeof ProductUpdateBodySchema>;
export type ProductImage = z.infer<typeof ProductImageSchema>;

// Product Update Schema for PATCH operations
export const ProductUpdateSchema = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    imageUrl: z.string().url().optional(),
    categoryId: z.number().optional(),
    statusId: z.number().optional(),
});

